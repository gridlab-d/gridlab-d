name: GridLAB-D Build

on:
  push:
    branches: [ "master" ]
#  workflow_dispatch:
#    # Inputs the workflow accepts.
#    inputs:
#      name:
#        # Friendly description to be shown in the UI instead of 'name'
#        description: 'Version'
#        # Default value if no value is explicitly provided
#        default: '5.0.0'
#        # Input has to be provided for the workflow to run
#        required: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-helics:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            boost_arch: x86
          - os: windows-latest
            arch: x86_64
            boost_arch: x86
          - os: macos-latest
            arch: x86_64
            boost_arch: x86
          - os: macos-latest
            arch: arm64
            boost_arch: aarch64
    runs-on: ubuntu-latest
    steps:
      - name: Setup boost
        uses: MarkusJx/install-boost@v2.3.1
        id: install-boost
        with:
          boost_version: 1.73.0
          arch: ${{ matrix.boost_arch }}
          boost_install_dir: ~/.cache/boost
      - uses: actions/checkout@v3
        with:
          repository: 'GMLC-TDC/HELICS.git'
          ref: 'v3.3.0'
          submodules: 'recursive'

      - name: Get Git Ref
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build HELICS Cache
        id: cache-helics
        uses: actions/cache@v3
        env:
          cache-name: cache-helics-lib
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.cache/boost
            ~/.cache/HELICS
          key: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.vars.outputs.sha_short }}
          restore-keys: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.vars.outputs.sha_short }}

      - if: ${{ steps.cache-helics-lib.outputs.cache-hit != 'true' }}
        name: Build HELICS
        run: |
          threads=`nproc`
          cmake -B ${{github.workspace}}/helics-build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/.cache/HELICS -DHELICS_ZMQ_SUBPROJECT=ON -DBOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }} -DCMAKE_APPLE_SILICON_PROCESSOR=${{matrix.arch}}
          cmake --build ${{github.workspace}}/helics-build --config ${{env.BUILD_TYPE}} --parallel $threads --target install

  linux-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS

      - name: Build
        # Build your program with the given configuration
        run: |
          threads=`nproc`
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Linux Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{github.workspace}}/build/packages
  #          |
  #            ${{github.workspace}}/build/*-Linux.tar.gz
  #            ${{github.workspace}}/build/*-Linux.tar.Z
  #            ${{github.workspace}}/build/*-Linux.zip
  #            ${{github.workspace}}/build/*-Linux.sh
  #            ${{github.workspace}}/build/*-Linux.rpm
  #            ${{github.workspace}}/build/*-Linux.deb

  win-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x86_64
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-nsis

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        working-directory: ${{github.workspace}}
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "Ninja" -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

      - name: Build
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: |
          threads=`nproc`
          cmake --build ./build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Windows Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{github.workspace}}/build/packages
  #          |
  #            ${{github.workspace}}/build/*-Windows.zip
  #            ${{github.workspace}}/build/*-Windows.exe

  mac-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build-${{matrix.arch}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS -DCMAKE_APPLE_SILICON_PROCESSOR=${{matrix.arch}}
      #        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCPACK_GENERATOR=DragNDrop

      - name: Build
        # Build your program with the given configuration
        run: |
          threads=`sysctl -n hw.logicalcpu`
          cmake --build ${{github.workspace}}/build-${{matrix.arch}} --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build-${{matrix.arch}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Mac ${{matrix.arch}} Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{github.workspace}}/build-${{matrix.arch}}/packages
      #           |
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.tar.gz
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.zip
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.pkg
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.dmg


      # The desired behavior if no files are found using the provided path.
#Available Options:
#  warn: Output a warning but do not fail the action
#  error: Fail the action with an error message
#  ignore: Do not output any warnings or errors, the action does not fail
#
#    if-no-files-found: # optional, default is warn
#    # Duration after which artifact will expire in days. 0 means using default retention.
#  Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
#
#retention-days: # optional