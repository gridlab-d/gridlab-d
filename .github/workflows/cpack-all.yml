name: GridLAB-D Build

on:
  push:
    branches: [ "master" ]
#  workflow_dispatch:
#    # Inputs the workflow accepts.
#    inputs:
#      name:
#        # Friendly description to be shown in the UI instead of 'name'
#        description: 'Version'
#        # Default value if no value is explicitly provided
#        default: '5.0.0'
#        # Input has to be provided for the workflow to run
#        required: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: |
          threads=`nproc`
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Linux Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ${{github.workspace}}/build/*-Linux.tar.gz
            ${{github.workspace}}/build/*-Linux.tar.Z
            ${{github.workspace}}/build/*-Linux.zip
            ${{github.workspace}}/build/*-Linux.sh
            ${{github.workspace}}/build/*-Linux.rpm
            ${{github.workspace}}/build/*-Linux.deb

  win-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: |
          powershell -command "[System.Environment]::SetEnvironmentVariable('GITHUB_SCRIPT', ('{0}' -replace '\\','\\')); [System.Environment]::SetEnvironmentVariable('PKG_CONFIG_PATH_MSYS', $Env:PKG_CONFIG_PATH); [System.Environment]::SetEnvironmentVariable('PATH_MSYS', $Env:Path);"
          msys2 -c 'if [[ -v MSYSTEM ]]; then sed -i 1d $(cygpath $GITHUB_SCRIPT); sed -i \$d $(cygpath $GITHUB_SCRIPT); if [[ -v PKG_CONFIG_PATH_MSYS ]]; then export PKG_CONFIG_PATH=$PKG_CONFIG_PATH_MSYS; fi; if [[ -v PATH_MSYS && ! ( $PATH_MSYS =~ ^D:\\\\a\\\\_temp\\\\msys\\;C:\\\\Users ) ]]; then export PATH=$(echo $PATH_MSYS | sed s/D:\\\\\\\\a\\\\\\\\_temp\\\\\\\\msys\;// | sed s/\;/:/g); fi; fi; source $(cygpath $GITHUB_SCRIPT)'

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nsis

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "Ninja" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

      - name: Build
        # Build your program with the given configuration
        run: |
          threads=`nproc`
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Windows Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ${{github.workspace}}/build/*-Windows.zip
            ${{github.workspace}}/build/*-Windows.exe

  mac-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    strategy:
      matrix:
        target:
          - DragNDrop
    #          - Bundle
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCPACK_GENERATOR=${{matrix.target}}

      - name: Build
        # Build your program with the given configuration
        run: |
          threads=`sysctl -n hw.logicalcpu`
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Mac ${{matrix.target}} Package # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ${{github.workspace}}/build/*-MacOS.tar.gz
            ${{github.workspace}}/build/*-MacOS.zip
            ${{github.workspace}}/build/*-MacOS.pkg
            ${{github.workspace}}/build/*-MacOS.dmg


      # The desired behavior if no files are found using the provided path.
#Available Options:
#  warn: Output a warning but do not fail the action
#  error: Fail the action with an error message
#  ignore: Do not output any warnings or errors, the action does not fail
#
#    if-no-files-found: # optional, default is warn
#    # Duration after which artifact will expire in days. 0 means using default retention.
#  Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
#
#retention-days: # optional