name: GridLAB-D Build

on:
  push:
    branches: [ "master" ]
#  workflow_dispatch:
#    # Inputs the workflow accepts.
#    inputs:
#      name:
#        # Friendly description to be shown in the UI instead of 'name'
#        description: 'Version'
#        # Default value if no value is explicitly provided
#        default: '5.0.0'
#        # Input has to be provided for the workflow to run
#        required: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-boost:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            boost_arch: x86_64
          - os: windows-latest
            arch: x86_64
            boost_arch: x86_64
          - os: macos-latest
            arch: x86_64
            boost_arch: x86_64
          - os: macos-latest
            arch: arm64
            boost_arch: aarch64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'boostorg/boost.git'
          ref: 'boost-1.73.0'
          submodules: 'recursive'
          fetch-depth: 0
          path: boost-build


      - name: Get Git Ref
        id: boost-git-ref
        working-directory: ${{ github.workspace }}/boost-build
        run: |
          git_ref=`git rev-parse --short HEAD`
          echo "ref is $git_ref"
          echo "::set-output name=sha_short::$git_ref"

      - name: Build Boost Cache
        id: cache-boost
        uses: actions/cache@v3
        env:
          cache-name: cache-boost
        with:
          path: ~/.cache/boost
          key: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.boost-git-ref.outputs.sha_short }}
          restore-keys: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.boost-git-ref.outputs.sha_short }}

      - if: ${{ steps.cache-boost.outputs.cache-hit != 'true' }}
        name: Build Boost
        working-directory: ${{ github.workspace }}/boost-build
        run: |
          threads=`nproc`
          ./bootstrap.sh --prefix=~/.cache/boost
          ./b2 architecture=${{matrix.boost_arch}}

  build-helics:
    needs: [ build-boost ]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            boost_arch: x86
          - os: windows-latest
            arch: x86_64
            boost_arch: x86
          - os: macos-latest
            arch: x86_64
            boost_arch: x86
          - os: macos-latest
            arch: arm64
            boost_arch: aarch64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'GMLC-TDC/HELICS.git'
          ref: 'v3.3.0'
          submodules: 'recursive'
          fetch-depth: 0
          path: helics-build

      - name: Get Git Ref
        id: helics-git-ref
        working-directory: ${{ github.workspace }}/helics-build
        run: |
          git_ref=`git rev-parse --short HEAD`
          echo "ref is $git_ref"
          echo "::set-output name=sha_short::$git_ref"

      - name: Build HELICS Cache
        id: cache-helics
        uses: actions/cache@v3
        env:
          cache-name: cache-helics
          BOOST_ROOT: ~/.cache/boost
        with:
          path: ~/.cache/HELICS
          key: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.helics-git-ref.outputs.sha_short }}
          restore-keys: ${{ matrix.os }}-${{ matrix.arch }}-build-${{ env.cache-name }}-${{ steps.helics-git-ref.outputs.sha_short }}

      - if: ${{ steps.cache-helics.outputs.cache-hit != 'true' }}
        name: Build HELICS
        working-directory: ${{github.workspace}}/helics-build
        run: |
          threads=`nproc`
          cmake -B ${{github.workspace}}/helics-build/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/.cache/HELICS \
          -DHELICS_ZMQ_SUBPROJECT=ON \
          -DBoost_INCLUDE_DIR=${{env.BOOST_ROOT}}/include \
          -DBoost_LIBRARY_DIRS=${{env.BOOST_ROOT}}/lib \
          -DCMAKE_APPLE_SILICON_PROCESSOR=${{matrix.arch}}
          cmake --build ${{github.workspace}}/helics-build/build --config ${{env.BUILD_TYPE}} --parallel $threads --target install
  linux-build:
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS

      - name: Build
        run: |
          threads=`nproc`
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Linux Package
          path: ${{github.workspace}}/build/packages
  #          |
  #            ${{github.workspace}}/build/*-Linux.tar.gz
  #            ${{github.workspace}}/build/*-Linux.tar.Z
  #            ${{github.workspace}}/build/*-Linux.zip
  #            ${{github.workspace}}/build/*-Linux.sh
  #            ${{github.workspace}}/build/*-Linux.rpm
  #            ${{github.workspace}}/build/*-Linux.deb

  win-build:
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x86_64
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-nsis

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        working-directory: ${{github.workspace}}
        run: cmake -G "Ninja" -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

      - name: Build
        working-directory: ${{github.workspace}}
        run: |
          threads=`nproc`
          cmake --build ./build --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Windows Package
          path: ${{github.workspace}}/build/packages
  #          |
  #            ${{github.workspace}}/build/*-Windows.zip
  #            ${{github.workspace}}/build/*-Windows.exe

  mac-build:
    needs: [ build-helics ]
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build-${{matrix.arch}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGLD_USE_HELICS=ON -DGLD_HELICS_DIR=~/.cache/HELICS -DCMAKE_APPLE_SILICON_PROCESSOR=${{matrix.arch}}

      - name: Build
        run: |
          threads=`sysctl -n hw.logicalcpu`
          cmake --build ${{github.workspace}}/build-${{matrix.arch}} --config ${{env.BUILD_TYPE}} --parallel $threads

      - name: Package
        working-directory: ${{github.workspace}}/build-${{matrix.arch}}
        run: cpack CPackConfig.cmake

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Mac ${{matrix.arch}} Package
          path: ${{github.workspace}}/build-${{matrix.arch}}/packages
      #           |
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.tar.gz
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.zip
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.pkg
      #            ${{github.workspace}}/build-${{matrix.arch}}/*-MacOS.dmg
