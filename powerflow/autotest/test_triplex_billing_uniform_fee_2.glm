// glm to validate monthly uniform billing with a varying power and a monthly fee
// load based on a player see billing_power.player for input to power_1
// previous monthly bill is off by large amount; see @weird
//
// author: alek332

clock {
     timezone CST+6CDT;
     starttime '2006-01-01 00:00:00';
     stoptime '2006-03-31 00:00:00';
}

#set profiler=1;
#set double_format=%+.12lg
#set randomseed=10;
#set minimum_timestep=60;
#set relax_naming_rules=1

module assert;
module tape;
module powerflow {
     solver_method FBS;
}
module market;


object stubauction {
     name STUB;
     unit price;
     period 3600;
     next.P 1.2;
}


object node {
     bustype SWING;
     name ROOT;
     phases ABCN;
     nominal_voltage 7200;
}

object overhead_line_conductor {
      name CU_AL;
      geometric_mean_radius 0.4 cm;
      resistance 0.1 ohm/km;
}

object line_spacing {
      name HORIZONTAL_ABCN;
      distance_AB 4 ft;
      distance_BC 4 ft;
      distance_AC 4 ft;
      distance_AN 6 ft;
      distance_BN 6 ft;
      distance_CN 6 ft;
}

object line_configuration {
      name OHL_config;
      conductor_A CU_AL;
      conductor_B CU_AL;
      conductor_C CU_AL;
      conductor_N CU_AL;
      spacing HORIZONTAL_ABCN;
}

object overhead_line {
      phases ABCN;
      from ROOT;
      to transformer_meter;
      length 25;
      configuration OHL_config;
      name ROOT_LINE;
}

object meter {
     name transformer_meter;
     phases ABCN;
     nominal_voltage 7200;
}

object transformer_configuration {
     name default_transformer_A;
     connect_type SINGLE_PHASE_CENTER_TAPPED;
     install_type PADMOUNT;
     primary_voltage 7200 V;
     secondary_voltage 124 V;
     power_rating 250.0;
     powerA_rating 250.0;
     impedance 0.015+0.0675j;
     shunt_impedance 454.5455+2045.4548j;
}

object transformer {
     name center_tap_transformer_A;
     phases AS;
     from transformer_meter;
     to triplex_node_A;
     configuration default_transformer_A;
}

object triplex_meter {
     name triplex_node_A;
     phases AS;
     nominal_voltage 124.00;
     bill_mode UNIFORM;
	 monthly_fee 10;
     price 1;

     bill_day 1;
//	 power_1 2;
	 power_2 1;
	 power_12 1;
	 object recorder {
		limit 7000;
		interval 84000;
		file uniform_bills.csv; 
		property monthly_energy,monthly_bill,previous_monthly_bill,previous_monthly_energy,monthly_fee,bill_mode,bill_day,price,first_tier_price,second_tier_price,third_tier_price,first_tier_energy,second_tier_energy,third_tier_energy;
	};
	object double_assert{
		target monthly_bill; 
		value 11.2816;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-11 00:00:00 CST';
	};
	object double_assert{
		target monthly_bill; 
		value 11.5768;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-16 00:00:00 CST';
	};
	object double_assert{
		target monthly_bill; 
		value 12.8584;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-26 00:00:00 CST';
	};
	object double_assert{
		target monthly_energy; 
		value 1.2816;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-11 00:00:00 CST';
	};
	object double_assert{
		target monthly_energy; 
		value 1.5768;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-16 00:00:00 CST';
	};
	object double_assert{
		target monthly_energy; 
		value 2.8584;
		within .1; 
		once ONCE_TRUE;
		in '2006-01-26 00:00:00 CST';
	};
	object double_assert{
		target previous_monthly_bill; 
		value 13.8952;
		within .1;  // @weird 
		once ONCE_TRUE;
		in '2006-02-08 00:00:00 CST';
	};
	object double_assert{
		target previous_monthly_energy; 
		value 3.8952;
		within .1;  // @weird 
		once ONCE_TRUE;
		in '2006-02-08 00:00:00 CST';
	};
	object player {
          file ../billing_power.player;
          loop 1;
          property power_1;
     };
}