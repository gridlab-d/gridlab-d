// Design a market to test "market result" progressions. This market will need to have a latency of at least 
// one period after the current market. Ensure the results of a cleared market successfully transition through 
// the next_market, current_market, and past_market  outputs. 

#set tmp=../test_market_auction_timing_2
#setenv GRIDLABD=../../../core

module tape;
module market;
module assert;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-03 00:00:00';
}

schedule buyer_price {
	* * * * * 10;
}

schedule seller_1_price {
	* 0-5 * * * 10;
	* 6-8 * * * 30;
	* 9-17 * * * 15;
	* 18-21 * * * 20;
	* 22-23 * * * 70;
}

schedule seller_2_price {
	* 0-5 * * * 20;
	* 6-8 * * * 40;
	* 9-17 * * * 20;
	* 18-21 * * * 30;
	* 22-23 * * * 80;
}

schedule seller_3_price {
	* 0-5 * * * 40;
	* 6-8 * * * 60;
	* 9-17 * * * 40;
	* 18-21 * * * 50;
	* 22-23 * * * 100;
}

schedule buyer_quantity {
	* 0-5 * * * 1;
	* 6-8 * * * 5;
	* 9-17 * * * 2;
	* 18-21 * * * 10;
	* 22-23 * * * 3;
}

schedule seller_quantity {
	* 0-5 * * * 3;
	* 6-8 * * * 7;
	* 9-17 * * * 2;
	* 18-21 * * * 15;
	* 22-23 * * * 3;
}

schedule assert_past_market_clearing_price {
	* 1-2 * * * 60;
	* 3-8 * * * 10;
	* 9-11 * * * 30;
	* 12-20 * * * 25;
	* 21-0 * * * 30;
}
schedule assert_past_market_clearing_quantity {
	* 1-2 * * * 0;
	* 3-8 * * * 3;
	* 9-11 * * * 7;
	* 12-20 * * * 4;
	* 21-0 * * * 20;
}
schedule assert_current_market_clearing_price {
	* 0-1 * * * 60;
	* 2-7 * * * 10;
	* 8-10 * * * 30;
	* 11-19 * * * 25;
	* 20-23 * * * 30;
}
schedule assert_current_market_clearing_quantity {
	* 0-1 * * * 0;
	* 2-7 * * * 3;
	* 8-10 * * * 7;
	* 11-19 * * * 4;
	* 20-23 * * * 20;
}
schedule assert_next_market_clearing_price {
	* 23-0 * * * 60;
	* 1-6 * * * 10;
	* 7-9 * * * 30;
	* 10-18 * * * 25;
	* 19-22 * * * 30;
}
schedule assert_next_market_clearing_quantity {
	* 23-0 * * * 0;
	* 1-6 * * * 3;
	* 7-9 * * * 7;
	* 10-18 * * * 4;
	* 19-22 * * * 20;
}

object auction {
	name Market_1;
	latency 3600;
	warmup 0;

	unit MWh;
	period 3600;
	init_price 0;
	verbose TRUE;
	special_mode NONE;
	object recorder {
		property past_market.clearing_price,past_market.clearing_quantity,current_market.clearing_price,current_market.clearing_quantity,next_market.clearing_price,next_market.clearing_quantity;
		file "test_market_timing_2.csv";
		interval 3600;
		limit 10000;
	};
	object double_assert{
		target "current_market.clearing_quantity";
		in '2001-01-01 2:00:00';
		status ASSERT_TRUE;
		value assert_current_market_clearing_quantity*1;
		within 0.001; // asserting clearing quantity within 1 percent of result
	};
	object double_assert{
		target "current_market.clearing_price";
		in '2001-01-01 2:00:00';
		status ASSERT_TRUE;
		value assert_current_market_clearing_price*1;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "next_market.clearing_quantity";
		in '2001-01-01 1:00:00';
		status ASSERT_TRUE;
		value assert_next_market_clearing_quantity*1;
		within 0.001; // asserting clearing quantity within 1 percent of result
	};
	object double_assert{
		target "next_market.clearing_price";
		in '2001-01-01 1:00:00';
		status ASSERT_TRUE;
		value assert_next_market_clearing_price*1;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "past_market.clearing_quantity";
		in '2001-01-01 3:00:00';
		status ASSERT_TRUE;
		value assert_past_market_clearing_quantity*1;
		within 0.001; // asserting clearing quantity within 1 percent of result
	};
	object double_assert{
		target "past_market.clearing_price";
		in '2001-01-01 3:00:00';
		status ASSERT_TRUE;
		value assert_past_market_clearing_price*1;
		within 0.001; // asserting clearing price within 1 percent of result
	};
}

object stub_bidder {
	name buyer_1;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price buyer_price*1;
	quantity buyer_quantity*1;
	count 10000;
}

object stub_bidder {
	name buyer_2;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price buyer_price*3;
	quantity buyer_quantity*1;
	count 10000;
}

object stub_bidder {
	name buyer_3;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price buyer_price*5;
	quantity buyer_quantity*1;
	count 10000;
}

object stub_bidder {
	name seller_1;
	role SELLER;
	bid_period 3600;
	market Market_1;
	price seller_1_price*1;
	quantity seller_quantity*1;
	count 10000;
}

object stub_bidder {
	name seller_2;
	role SELLER;
	bid_period 3600;
	market Market_1;
	price seller_2_price*1;
	quantity seller_quantity*1;
	count 10000;
}

object stub_bidder {
	name seller_3;
	role SELLER;
	bid_period 3600;
	market Market_1;
	price seller_3_price*1;
	quantity seller_quantity*1;
	count 10000;
}
