// Design a market to test equal bidding scenarios. Implement two bidders 
// (do for both buyers and sellers, individually) that submit bids of equal parameters. 
// These will be equal price, equal quantity, and equal price and quantity. Ensure the market clears 
// to the correct final value. Adjust the buyer and seller curves so a clearing point occurs on one of 
// these duplicated bid quantities. Ensure the market resolves to the correct final values. 

#set tmp=../test_market_auction_clearing_3
#setenv GRIDLABD=../../../core

module tape;
module market;
module assert;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-03 00:00:00';
}

schedule buyer_price1 {
	* 0-1 * * * 40;   // identical buyers with same bids, different quantities, enough supply*
	* 2-3 * * * 50;   // identical buyers with different bids, same quantities, enough supply*
	* 4-5 * * * 40;   // identical buyers with same bids, different quantities, not enough supply*
	* 6-7 * * * 45;   // identical buyers with different bids, same quantities, not enough supply*
	* 8-9 * * * 40;   // identical buyers with same bids, same quantities, not enough supply*
	* 10-11 * * * 40; // identical buyers with same bids, same quantities, enough supply*
	* 12-13 * * * 40; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 40; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 40; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 50; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 40; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 40; // identical sellers with same bids, same quantities, enough supply
}

schedule buyer_price2 {
	* 0-1 * * * 40;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 40;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 40;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 40;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 40;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 40; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 40; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 40; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 40; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 40; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 40; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 40; // identical sellers with same bids, same quantities, enough supply
}

schedule seller_price1 {
	* 0-1 * * * 30;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 30;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 30;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 30;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 30;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 30; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 40; // identical sellers with same bids, different quantities, enough supply*
	* 14-15 * * * 35; // identical sellers with different bids, same quantities, enough supply*
	* 16-17 * * * 40; // identical sellers with same bids, different quantities, not enough supply*
	* 18-19 * * * 45; // identical sellers with different bids, same quantities, not enough supply*
	* 20-21 * * * 40; // identical sellers with same bids, same quantities, not enough supply*
	* 22-23 * * * 40; // identical sellers with same bids, same quantities, enough supply
}

schedule seller_price2 {
	* 0-1 * * * 30;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 30;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 30;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 30;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 30;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 30; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 40; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 40; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 40; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 40; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 40; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 40; // identical sellers with same bids, same quantities, enough supply
}

schedule buyer_quantity1 {
	* 0-1 * * * 6;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 5;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 4;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 3;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 5.5;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 4; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 4; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 4; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 4; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 4; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 4; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 4; // identical sellers with same bids, same quantities, enough supply
}

schedule buyer_quantity2 {
	* 0-1 * * * 8;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 5;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 3;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 3;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 5.5;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 4; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 4; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 4; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 4; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 4; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 4; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 4; // identical sellers with same bids, same quantities, enough supply
}

schedule seller_quantity1 {
	* 0-1 * * * 7;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 6;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 2;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 2.5;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 4;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 5; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 5; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 6; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 3; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 5; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 3; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 5; // identical sellers with same bids, same quantities, enough supply
}

schedule seller_quantity2 {
	* 0-1 * * * 9;   // identical buyers with same bids, different quantities, enough supply
	* 2-3 * * * 6;   // identical buyers with different bids, same quantities, enough supply
	* 4-5 * * * 4;   // identical buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 2.5;   // identical buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 4.5;   // identical buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 6; // identical buyers with same bids, same quantities, enough supply
	* 12-13 * * * 4; // identical sellers with same bids, different quantities, enough supply
	* 14-15 * * * 6; // identical sellers with different bids, same quantities, enough supply
	* 16-17 * * * 4; // identical sellers with same bids, different quantities, not enough supply
	* 18-19 * * * 5; // identical sellers with different bids, same quantities, not enough supply
	* 20-21 * * * 3; // identical sellers with same bids, same quantities, not enough supply
	* 22-23 * * * 5; // identical sellers with same bids, same quantities, enough supply
}

schedule assert_clearing_price{
	* 1-2 * * * 30;   // identical buyers with same bids, different quantities, enough supply(seller_price)
	* 3-4 * * * 30;   // identical buyers with different bids, same quantities, enough supply(seller_price)
	* 5-6 * * * 40;   // identical buyers with same bids, different quantities, not enough supply(bidder_price)
	* 7-8 * * * 40;   // identical buyers with different bids, same quantities, not enough supply(low_bidder_price)
	* 9-10 * * * 40;   // identical buyers with same bids, same quantities, not enough supply(bidder_price)
	* 11-12 * * * 30; // identical buyers with same bids, same quantities, enough supply(seller_price)
	* 13-14 * * * 40; // identical sellers with same bids, different quantities, enough supply(seller_price)
	* 15-16 * * * 40; // identical sellers with different bids, same quantities, enough supply(high_seller_price)
	* 17-18 * * * 40; // identical sellers with same bids, different quantities, not enough supply(bidder_price)
	* 19-20 * * * 40; // identical sellers with different bids, same quantities, not enough supply(bidder_price)
	* 21-22 * * * 40; // identical sellers with same bids, same quantities, not enough supply(bidder_price)
	* 23-0 * * * 40; // identical sellers with same bids, same quantities, enough supply(seller_bid))
}

schedule assert_clearing_quantity{
	* 1-2 * * * 14;   // identical buyers with same bids, different quantities, enough supply(bidder_quantity)*
	* 3-4 * * * 10;   // identical buyers with different bids, same quantities, enough supply(bidder_quantity)*
	* 5-6 * * * 6;   // identical buyers with same bids, different quantities, not enough supply(seller_quantity)*
	* 7-8 * * * 5;   // identical buyers with different bids, same quantities, not enough supply(seller_quantity)*
	* 9-10 * * * 8.5;   // identical buyers with same bids, same quantities, not enough supply(seller_quantity)*
	* 11-12 * * * 8; // identical buyers with same bids, same quantities, enough supply(bidder_quantity)*
	* 13-14 * * * 8; // identical sellers with same bids, different quantities, enough supply(bidder_quantity)*
	* 15-16 * * * 8; // identical sellers with different bids, same quantities, enough supply(bidder_quantity)*
	* 17-18 * * * 7; // identical sellers with same bids, different quantities, not enough supply(seller_quantity)*
	* 19-20 * * * 5; // identical sellers with different bids, same quantities, not enough supply(seller_quantity)*
	* 21-22 * * * 6; // identical sellers with same bids, same quantities, not enough supply(seller_quantity)*
	* 23-0 * * * 8; // identical sellers with same bids, same quantities, enough supply(bidder_quantity)*
}

object auction {
	name Market_1;

	unit MWh;
	period 3600;
	verbose FALSE;
	special_mode NONE;
	warmup 0;
	object multi_recorder {
		property current_market.clearing_price,current_market.clearing_quantity,buyer_1:price,buyer_1:quantity,buyer_2:price,buyer_2:quantity,seller_1:price,seller_1:quantity,seller_2:price,seller_2:quantity;
		file "test_auction_3.csv";
		interval 3600;
		limit 240;
	};
	object double_assert{
		target "current_market.clearing_price";
		in '2001-01-02 01:00:00';
		value assert_clearing_price*1;
		out '2001-01-03 00:00:00';
		status ASSERT_TRUE;
		within 0.0001; // asserting clearing price
	};
	
	object double_assert{
		target "current_market.clearing_quantity";
		in '2001-01-02 01:00:00';
		value assert_clearing_quantity*1;
		out '2001-01-03 00:00:00';
		status ASSERT_TRUE;
		within 0.0001; // asserting clearing quantity
	};
	
}

object stub_bidder {
	name buyer_1;
	role BUYER;
	bid_period 1800;
	market Market_1;
	price buyer_price1*1;
	quantity buyer_quantity1*1;
	count 10000;
}

object stub_bidder {
	name buyer_2;
	role BUYER;
	bid_period 1800;
	market Market_1;
	price buyer_price2*1;
	quantity buyer_quantity2*1;
	count 10000;
}

object stub_bidder {
	name seller_1;
	role SELLER;
	bid_period 1800;
	market Market_1;
	price seller_price1*1;
	quantity seller_quantity1*1;
	count 10000;
}

object stub_bidder {
	name seller_2;
	role SELLER;
	bid_period 1800;
	market Market_1;
	price seller_price2*1;
	quantity seller_quantity2*1;
	count 10000;
}


